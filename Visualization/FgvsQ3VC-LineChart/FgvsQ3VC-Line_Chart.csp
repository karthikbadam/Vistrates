<div class="section section-visible hide-collapsed-paragraphs" data-type="package" name="Line Chart" data-id="FgvsQ3VC" transient-focussed="true"><div class="paragraph body-paragraph" name="Documentation" data-id="t4R3qdfp"><div data-type="content" type="text/html" codemirror="true" contenteditable="true" class="section-documentation" data-gramm_id="695e25e1-a099-cb9d-843c-bc7ba3970a85" data-gramm="true" spellcheck="false" data-gramm_editor="true"><h2>Line Chart</h2><div>Your description...</div></div><grammarly-btn><div class="_1BN1N Kzi1t MoE_1 _2DJZN Ho4t0" style="z-index: 2; transform: translate(806px, 90px);"><div class="_1HjH7"><div title="Protected by Grammarly" class="_3qe6h">&nbsp;</div></div></div></grammarly-btn></div><div class="paragraph data-paragraph collapsed" name="Properties" data-id="hd4PkccP"><pre data-type="content" type="application/json" class="section-properties">{
	"version": "0.1.3",
	"icon": "your_material_icon_string",
	"description": "Line chart visualization component that can work with any data attribute",
	"tags": [
		"vistrate",
		"chart", 
		"visualization"
	],
	"dependencies": [
		{
			"id": "kTKppb2i",
			"name": "Vistrate",
			"optional": false
		},
		{
			"id": "2DQH3q7U",
			"name": "Vistrate standard library",
			"optional": false
		}
	],
	"changelog":
	{
		"0.1.3": "Fixed CSS and supporting filtering",
		"0.1.2": "Fixed a bug with brushing",
		"0.1.1": "Fixed a bug",
		"0.1": "Initial version."
	},
  "github": {
    "url": "https://github.com/karthikbadam/Vistrates",
    "folder": "Visualization/FgvsQ3VC-LineChart"
  }
}</pre></div><div class="paragraph code-paragraph collapsed" name="Line Chart" data-id="mtHVKneC" last-execution-state="success"><pre data-type="content" type="text/javascript-viscontroller" class="viscontroller" id="lineChart"> vc = {
	data: '$data-id',
	src: ["data"],
	props: ["x", "color"],
	libs: ['https://d3js.org/d3.v4.min.js'],
	init: function() {
		this.view.content = '&lt;svg class="lineChart"&gt;&lt;/svg&gt;';
		let that = this;
		this.filter = require("#stdlib-filter").filter;
	
		
		// for a data type, returns the scale with domain set.
		function getScale (type, data, key) {
			var scale;
			switch (type) {
				case 'datetime':
					scale = d3.scaleTime().domain(d3.extent(data, function(d) { return d[key]; }));
					break;
				case 'date':
					scale = d3.scaleTime().domain(d3.extent(data, function(d) { return d[key]; }));
					break;
				case 'time':
					scale = d3.scaleTime().domain(d3.extent(data, function(d) { return d[key]; }));
					break;
				case 'string':
					scale = d3.scalePoint().domain(data.map(function(d) { return d[key]; })).padding(0.5);
					break;
				case 'integer':
					scale = d3.scaleLinear().domain(d3.extent(data, function(d) { return d[key]; }));
					break;
				case 'float':
					scale = d3.scaleLinear().domain(d3.extent(data, function(d) { return d[key]; }));
					break;
				default:
					scale = d3.scalePoint().domain(data.map(function(d) { return d[key]; })).padding(0.5);
					console.log('Sorry, we are out of ' + type + '.');
			}
			scale.type = type;
			
			// invert interaction to data function 
			scale.invertRange = function (extent) {
				var s = this;
				if (s.type == "string" || !this.invert) {
					return s.domain().filter(function (e) {
						return extent[0] &lt;= s(e) &amp;&amp; s(e) &lt;= extent[1];
					});
				} else{
					return [s.invert(extent[0]), s.invert(extent[1])].sort(function(a, b){return a-b;});
				}
			};
			
			return scale;
		}
		
		// Creating variables and scales 
		let margin = {
			left: 40,
			right: 40, 
			top: 10, 
			bottom: 50
		};
		let width = 700 - margin.left - margin.right;
		let height = 300 - margin.top - margin.bottom;
		let x = d3.scaleTime().range([0, width]);
		let y = d3.scaleLinear().range([height, 0]);
		let svg = d3.select(this.view.element.querySelector("svg")).append("g") //Removed specific id
			.attr("class", "container");
		this.types = null;
		let xValue = (d) =&gt; {
				return d.key;
		};
		
		let yValue = (d) =&gt; {
			return d.value;
		};
	
		let line = d3.line()
    	.x(function(d) { return x(xValue(d)); })
    	.y(function(d) { return y(yValue(d)); })
			.curve(d3.curveMonotoneX);
		
		let brush = d3.brushX()
    	.extent([[0, 0], [width, height]])
    	.on("brush end", brushed);
		
		function brushed() {
			if (d3.event.sourceEvent &amp;&amp; d3.event.sourceEvent.type === "zoom") return; // ignore brush-by-zoom
			var s = d3.event.selection || x.range();
			var interaction = x.invertRange(s);
			var t = {};
			t[that.props.x] = interaction;
			that.data = t;
		}
		
		// Draw function that can be called with new data to render
		this.draw = (data) =&gt; {
			// remove invalid values
			data = data.filter(function (d) {
				if ( Object.prototype.toString.call(d.key) === "[object Date]" ) {
					if (isNaN(d.key.getTime())) {
						return false;
					}
				}
				
				if (that.types[that.props.x] == "integer" || that.types[that.props.x] == "float") {
					if (isNaN(d.key)) {
						return false;
					}
				}
				
				return true;
			});
			
			var types = this.types;
			
			let svg = d3.select(this.view.element.querySelector("svg")) // Removed specific id
				.attr("width", width + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom)
				.select(".container")
				.attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");	
			
			// Scale the range of the data
			x = getScale(types[this.props.x], data, "key").range([0, width]);
			y.domain([0, d3.max(data, function(d) { return d.value; })]).range([height, 0]);
			
			// Add the valueline path.
			let path_line = svg.selectAll(".line_mark")
				.data([data]);
			
			//Enter
			path_line.enter().append("path")
				.attr("class", "line_mark")
				.attr("d", line);
			
			//Update
			path_line.attr("d", line);
			
			//Exit
			path_line.exit().remove();
			
			// Add the X Axis
			let xAxis = svg.selectAll(".x.axis").data([data]);
			
			xAxis.enter().append("g").attr("class", "x axis")
				.attr("transform", "translate(0," + height + ")")
				.call(d3.axisBottom(x))
				.selectAll("text")	
				.style("text-anchor", "middle")
				.attr("dy", ".50em")
				.attr("transform", function(d) {
					return "rotate(-15)";
				});
			
			xAxis.call(d3.axisBottom(x));
			
			// Add the Y Axis
			let yAxis = svg.selectAll(".y.axis").data([data]);
			
			yAxis.enter().append("g").attr("class", "y axis")
				.call(d3.axisLeft(y));
			
			yAxis.call(d3.axisLeft(y));
			
			// Attach a brush
			let brushElem = svg.selectAll(".brush").data([data]);
				
			brushElem.enter()
				.append("g")
				.attr("class", "brush")
				.call(brush);
			
			brushElem.call(brush);
			brushElem.exit().remove();
			
			// Titles to the axes
      let yLabel = svg.selectAll(".y_label").data([data]);
			
			yLabel.enter().append("text")
				.attr("class", "y_label")
				.attr("text-anchor", "middle")  
				.attr("transform", "translate(" + (-margin.left) +","+(height/2)+")rotate(-90)") 
				.attr("alignment-baseline", "hanging")
				.text("Count");
			
			yLabel.attr("transform", "translate(" + (-margin.left) +","+(height/2)+")rotate(-90)") 
				.attr("alignment-baseline", "hanging")
				.text("Count");
			
      let xLabel = svg.selectAll(".x_label").data([data]);
			
			xLabel.enter().append("text")
				.attr("class", "x_label")
				.attr("text-anchor", "middle")
				.attr("transform", "translate("+ width/2 +","+ (height + margin.bottom - 2)+")")
				.attr("alignment-baseline", "baseline")
				.text(this.props.x);
			
			xLabel.attr("text-anchor", "middle")
				.attr("transform", "translate("+ width/2 +","+ (height + margin.bottom - 2)+")")
				.attr("alignment-baseline", "baseline")
				.text(this.props.x);

			// Piping the output for next steps
			this.filter(this.src.data.output, [this.data], this.types)
			.then((response) =&gt; {
				this.output = response.selected;
			});
		};
	},
	destroy: function() {

	},
	update: function() {
		if (!this.src.data) return;
		var data = this.src.data.output;
		this.aggregator = require("#stdlib-aggregation").aggregation;
		if (!this.types) {
			this.extract_types = require("#stdlib-extract-types").extract_types;
			this.extract_types(data.slice(0, 5)).then((response) =&gt; {
				this.types = response;
				var parser, reducer = null;
				if (this.types[this.props.x] == "date") {
					parser = function (d) {
						return new Date(Date.parse(d));
					};
					reducer = d3.timeMonth.round;
				} else if (this.types[this.props.x] == "time") {
					parser = function (d) {
						return new Date('2018-01-02T' + 
											(d.length &lt; 8? "0"+ d: d)  + 'Z');
					};
					reducer = d3.timeHour.round;
				}
				this.aggregator(data, this.props.x, parser, reducer, this.types[this.props.x])
					.then((response) =&gt; {
						this.draw(response);
					});
			});
		} else {
			var parser, reducer = null;
			if (this.types[this.props.x] == "date") {
				parser = function (d) {
					return new Date(Date.parse(d));
				};
				reducer = d3.timeMonth.round;
			} else if (this.types[this.props.x] == "time") {
				parser = function (d) {
					return new Date('2018-01-02T' + 
										(d.length &lt; 8? "0"+ d: d)  + 'Z');
				};
				reducer = d3.timeHour.round;
			}
			this.aggregator(data, this.props.x, parser, reducer, this.types[this.props.x])
				.then((response) =&gt; {
				this.draw(response);
			});
		}
	},
};</pre></div><div class="paragraph data-paragraph collapsed" name="Line Chart data" data-id="AJ7AkBpA"><pre data-type="content" type="application/json" id="lineChart-data" class="visdata">{
  "config": {
    "src": {
      "data": ""
    },
    "view": "$view-id"
  },
  "data": {
  }
}</pre></div><div class="paragraph body-paragraph" name="Line Chart view" data-id="dqWe7WMV"><div data-type="content" type="text/html" codemirror="true" contenteditable="true" id="lineChart-view" class="visview"></div></div><div class="paragraph style-paragraph collapsed" data-id="anBtiBwW" name="Line Chart style"><style data-type="content" type="text/css" codemirror="true">.lineChart {
	font-size: 12px;
	background-color: white;
}

.lineChart .line_mark {
  fill: none;
  stroke: steelblue;
  stroke-width: 2px;
}

.lineChart .tick text {
	fill: black;
}

.lineChart .tick line {
	stroke: black;
}

.lineChart .domain {
	stroke: black;
}

.lineChart text{
	cursor: default;
}

.lineChart .y_label, .x_label {
	fill: black;
}</style></div></div>