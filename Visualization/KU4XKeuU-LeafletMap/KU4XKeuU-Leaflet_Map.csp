<div class="section section-visible" name="Leaflet Map" data-id="KU4XKeuU" style="" draggable="false" data-type="package" transient-focussed="true"><div class="paragraph body-paragraph collapsed" name="Documentation" data-id="wa39ivrf" style=""><div data-type="content" type="text/html" codemirror="true" contenteditable="true" class="section-documentation"><h2>Leaflet Map</h2><div>Map implementation using leaflet with marker clustering and area selection. The output is a query that can be used with the searchjs filter.</div></div></div><div class="paragraph data-paragraph collapsed locked" name="Properties" data-id="BUwvQ5Se" style=""><pre data-type="content" type="application/json" class="section-properties" contenteditable="false">{
	"version": "0.9.0",
	"icon": "location_on",
	"description": "Leaflet map component.",
	"tags": [
		"vistrate"
	],
  "assets": [
		"leaflet.zip", "MarkerCluster.css", "MarkerCluster.Default.css", "leaflet.draw.css", "font-awesome.css", "easy-button.css", "leaflet.markercluster-src.js",
       "leaflet.draw.js",
       "lodash.min.js",
       "easy-button.js"
	],
	"dependencies": [
		{
			"id": "kTKppb2i",
			"name": "Vistrate",
			"optional": false
		}
	],
	"changelog":
	{
    "0.9.0": "Loading libraries as assets",
    "0.8.9": "Changed default map view.",
    "0.8.8": "Map is configured to span 100% width and height if possible.",
    "0.8.7": "Fixed id bug.",
    "0.8.6": "Added run-on-add class to run the component immediately after adding it",
    "0.8.5": "Minor bug fix.",
    "0.8.4": "Fixed marker image path.",
    "0.8.3": "Updated Leaflet z-indexes.",
    "0.8.2": "Minor bug fix.",
    "0.8.1": "Updates are nore handeled properly.",
    "0.8": "Added location following and view selection toggles.",
    "0.7": "Another bug fix.",
    "0.6": "Minor bug fix.",
    "0.5": "Compute new map id.",
    "0.4": "Changed the selection interaction.",
		"0.3": "Minor bug fixes.",
		"0.2": "Removed hardcoded view and data ids.",
		"0.1": "Initial version."
	},
  "github": {
    "url": "https://github.com/karthikbadam/Vistrates",
    "folder": "Visualization/KU4XKeuU-LeafletMap"
  }
}</pre></div><div class="paragraph code-paragraph collapsed" name="Leaflet Map" data-id="7SGUWwMp" last-execution-state="success"><pre data-type="content" type="text/javascript-viscontroller" class="viscontroller run-on-add" id="leafletMap">vc = {
	data: '$data-id',
	src: ["data", "gps"],
	props: ["lat", "lng", "name", "loc_lat", "loc_lng"],
	libs:["leaflet.zip/leaflet.js", "leaflet.markercluster-src.js",
       "leaflet.draw.js",
       "lodash.min.js",
        "easy-button.js"],
	init: function() {
		importStyle(["leaflet.zip/leaflet.css",
                 "MarkerCluster.css", "MarkerCluster.Default.css", "leaflet.draw.css", "font-awesome.css", "easy-button.css"]);
    
    window.console.log('init Map Leaflet called');
		
		let that = this;
		
  	let mapContainer = document.createElement("div");
		mapContainer.classList.add("leaflet-map-container");
    this.view.content = mapContainer;
		L.Icon.Default.imagePath = "leaflet.zip/images/";
		let map = L.map(mapContainer, {
        minZoom: 2
    });
    map.setView([52.5168741,13.2935227], 12);

		L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
			maxZoom: 18,
			attribution: 'Map data &amp;copy; &lt;a href="http://openstreetmap.org"&gt;OpenStreetMap&lt;/a&gt; contributors, ' +
			'&lt;a href="http://creativecommons.org/licenses/by-sa/2.0/"&gt;CC-BY-SA&lt;/a&gt;, ' +
			'Imagery Â© &lt;a href="http://mapbox.com"&gt;Mapbox&lt;/a&gt;',
			id: 'mapbox.streets'
		}).addTo(map);
		  
		let markers = L.markerClusterGroup();
		map.addLayer(markers);
		
		this.update_markers = function(){
			markers.clearLayers();
			markers = L.markerClusterGroup();
			this.src.data.output.forEach((d) =&gt; {
				if(d[that.props.lat] !== undefined &amp;&amp; d[that.props.lng] !== undefined){
					var title = d[that.props.name];
					var marker = L.marker(new L.LatLng(d[that.props.lat], d[that.props.lng]), { title: title});
					marker.bindPopup(title);
					markers.addLayer(marker);
				}
			});
			map.addLayer(markers);
		};
    
    let location_marker;
    this.update_location_marker = function(){
      if(location_marker) map.removeLayer(location_marker);
      if(!this.src.gps || !this.src.gps.output || !this.props.loc_lat || !this.props.loc_lng) return;
      location_marker = L.circle(new L.LatLng(this.props.loc_lat, this.props.loc_lng), {title: "Your location", radius: 30, color: 'red', fill: true, fillColor: 'red', fillOpacity: 1});
      map.addLayer(location_marker);
    };
        
    let drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);
    let drawControl = new L.Control.Draw({
      draw: {
        polyline: false,
        polygon: false,
        marker: false,
        circle: false,
      },
      edit: {
        featureGroup: drawnItems,
        edit: false
      }
    });
    map.addControl(drawControl);
    
    map.on(L.Draw.Event.CREATED, function (event) {
      let layer = event.layer;
			let temp = that.data;
      if(!temp.rects) temp.rects = [];
      temp.rects.push({latlngs: layer.getLatLngs(), bounds: layer.getBounds()});
      that.data = temp;
    });
    
    map.on(L.Draw.Event.DELETED, function (event) {
      let layers = event.layers;
      let temp = that.data;
      layers.eachLayer((layer) =&gt; {
        let i =  _.findIndex(temp.rects, {latlngs: layer.getLatLngs(), bounds: layer.getBounds()});
        temp.rects.splice(i, 1);
      });
      that.data = temp;
    });

    this.draw_layers = function(){
      if(!this.data.rects) return;
      drawnItems.clearLayers();
      this.data.rects.forEach((rect) =&gt; {
        let layer = L.rectangle(rect.latlngs, {weight: 3,color: 'blue',opacity: 0.5});
        drawnItems.addLayer(layer);
      });
    };  
        
    this.loc_follow = false;
    this.view_select = false;
  
  	this.updateOutput = function(){
      if(that.view_select){
        let bounds = map.getBounds();
        let output = {terms: []};
        let lat_obj = {};
        lat_obj[that.props.lat] = {gte:bounds._southWest.lat, lte:bounds._northEast.lat};
        output.terms.push(lat_obj);
        let lng_obj = {};
        lng_obj[that.props.lng] = {gte:bounds._southWest.lng, lte:bounds._northEast.lng};
        output.terms.push(lng_obj);
        that.output = output;
      }
      else {
        if(!this.data.rects || !this.src.data || !this.src.data.output || !this.props.lat || !this.props.lng) return;
        let output = {_join: "OR", terms: []};
        this.data.rects.forEach((rect) =&gt; {
          let temp = {terms: []};
          let lat_obj = {};
          lat_obj[that.props.lat] = {gte:rect.bounds._southWest.lat, lte:rect.bounds._northEast.lat};
          temp.terms.push(lat_obj);
          let lng_obj = {};
          lng_obj[that.props.lng] = {gte:rect.bounds._southWest.lng, lte:rect.bounds._northEast.lng};
          temp.terms.push(lng_obj);
          output.terms.push(temp);
        });
        that.output = output;
        
      }
		};
    
    map.on('moveend', function(){
      if(that.view_select){
        that.updateOutput();
      }
    });
    
    map.on('zoomend', function(){
      if(that.view_select){
        that.updateOutput();
      }
    });
    
    this.update_view = function(){
      if(!that.src.gps || !that.src.gps.output || !that.props.loc_lat || !that.props.loc_lng) return;
			map.setView([that.props.loc_lat, that.props.loc_lng], 16);
    };
    
    let location_toggle = L.easyButton({
      states: [{
        stateName: 'loc-follow',
        icon: 'fa-location-arrow',
        title: 'Follow my location',
        onClick: function(control) {
          that.loc_follow = true;
          control.state('free-view');
          that.update_view();
        }
      }, {
        icon: 'fa-undo',
        stateName: 'free-view',
        title: 'Toggle free view',
        onClick: function(control) {
          that.loc_follow = false;
          control.state('loc-follow');
        }
      }]
		});
    location_toggle.button.style.width = '17px';
    location_toggle.button.style.height = '28px';
		location_toggle.addTo(map);
      
   	let selection_toggle = L.easyButton({
      states: [{
        stateName: 'view-selection',
        icon: 'far fa-square',
        title: 'Toggle view selection',
        onClick: function(control) {
          that.view_select = true;
          control.state('sync-selection');
          that.updateOutput();
        }
      }, {
        icon: 'fa-undo',
        stateName: 'sync-selection',
        title: 'Toggle synchronized selection',
        onClick: function(control) {
          that.view_select = false;
          control.state('view-selection');
          that.updateOutput();
        }
      }]
		});
    selection_toggle.button.style.width = '17px';
    selection_toggle.button.style.height = '28px';
		selection_toggle.addTo(map);
    
    this.draw_layers();
    this.update_location_marker();
	},
	update: function(source) {
		if(source === "ownData"){
			this.draw_layers();
      this.updateOutput();
		}
    else if(this.src.gps &amp;&amp; source === this.src.gps.id){
      if(this.loc_follow){
        this.update_view();
      }
      if(this.view_select){
        this.updateOutput();
      }
      this.update_location_marker();
    }
    else{
      if(!this.src.data || !this.src.data.output || !this.props.lat || !this.props.lng || !this.props.name) return;
      this.update_markers();
       this.updateOutput();
    }
	},
};</pre></div><div class="paragraph style-paragraph collapsed" data-id="QuuuWDhT" name="Leaflet Map Style"><style data-type="content" type="text/css" codemirror="true" class="skip">.leaflet-map-container {
  width: 100%;
  height: 100%;
  min-width: 300px;
  min-height: 500px;
}</style></div><div class="paragraph data-paragraph collapsed" name="Leaflet Map data" data-id="Pa4TWkJY"><pre data-type="content" type="application/json" id="leafletMap-data" class="visdata">{
  "config": {
    "view": "$view-id",
    "src": {}
  },
  "data": {}
}</pre></div><div class="paragraph body-paragraph locked" name="Leaflet Map view" data-id="iauiWUu3"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" id="leafletMap-view" class="visview"></div></div></div>