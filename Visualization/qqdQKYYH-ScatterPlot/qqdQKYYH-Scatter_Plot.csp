<div class="section section-visible hide-collapsed-paragraphs" data-type="package" name="Scatter Plot" data-id="qqdQKYYH" transient-focussed="true"><div class="paragraph body-paragraph" name="Documentation" data-id="X6mj2AQB"><div data-type="content" type="text/html" codemirror="true" contenteditable="true" class="section-documentation" data-gramm_id="fe2b3c04-d988-9f68-1d1f-403e4ca49212" data-gramm="true" spellcheck="false" data-gramm_editor="true"><h2>Scatter Plot</h2><div>Your description...</div></div><grammarly-btn><div class="_1BN1N Kzi1t MoE_1 _2DJZN Ho4t0" style="z-index: 2; transform: translate(806px, 90px);"><div class="_1HjH7"><div title="Protected by Grammarly" class="_3qe6h">&nbsp;</div></div></div></grammarly-btn></div><div class="paragraph data-paragraph locked collapsed" name="Properties" data-id="8iZfX9n7"><pre data-type="content" type="application/json" class="section-properties" contenteditable="false">{
	"version": "0.1.4",
	"icon": "your_material_icon_string",
	"description": "Scatterplot visualization component that can plot any x, y",
	"tags": [
		"vistrate",
		"chart", 
		"visualization"
	],
	"dependencies": [
		{
			"id": "kTKppb2i",
			"name": "Vistrate",
			"optional": false
		},
		{
			"id": "2DQH3q7U",
			"name": "Vistrate standard library",
			"optional": false
		}
	],
	"changelog":
	{
    "0.1.4": "Minor bug fix",
		"0.1.3": "Fixed CSS and added filtering options",
		"0.1.2": "Fixed slow rendering when dimensions change",
		"0.1.1": "changed tag.",
		"0.1": "Initial version."
	},
  "github": {
    "url": "https://github.com/karthikbadam/Vistrates",
    "folder": "Visualization/qqdQKYYH-ScatterPlot"
  }
}</pre></div><div class="paragraph code-paragraph collapsed" name="Scatter Plot" data-id="t2tWa9Ug" last-execution-state="success"><pre data-type="content" type="text/javascript-viscontroller" class="viscontroller" id="scatterPlot">vc = {
	data: '$data-id',
	libs: ['https://d3js.org/d3.v4.min.js'],
	src: ["data"],
	props: ["x", "y"],
	init: function() {
		this.view.content = '&lt;svg class="scatterPlot"&gt;&lt;/svg&gt;';
		let that = this;
		this.filter = require("#stdlib-filter").filter;
	
		// For a data type, returns the scale with domain set.
		function getScale (type, data, key) {
			var scale;
			switch (type) {
				case 'datetime':
					scale = d3.scaleTime().domain(d3.extent(data, function(d) { return d[key]; }));
					break;
				case 'date':
					scale = d3.scaleTime()
						.domain(d3.extent(data, function(d) { return new Date(Date.parse(d[key])); }));
					break;
				case 'time':
					scale = d3.scaleTime()
						.domain(d3.extent(data, function(d) { return new Date('2018-01-02T' + 
										(d[dimensions[0]].length &lt; 8? "0"+ d[dimensions[0]]: d[dimensions[0]])  + 'Z'); }));
					break;
				case 'string':
					scale = d3.scalePoint().domain(data.map(function(d) { return d[key]; }).sort()).padding(0.5);
					break;
				case 'integer':
					scale = d3.scaleLinear().domain(d3.extent(data, function(d) { return d[key]; }));
					break;
				case 'float':
					scale = d3.scaleLinear().domain(d3.extent(data, function(d) { return d[key]; }));
					break;
				default:
					scale = d3.scalePoint().domain(data.map(function(d) { return d[key]; })).padding(0.5);
					console.log('Sorry, we are out of ' + type + '.');
			}
			scale.type = type;
			
			// invert interaction to data function 
			scale.invertRange = function (extent) {
				var s = this;
				if (s.type == "string" || !this.invert) {
					return s.domain().filter(function (e) {
						return extent[0] &lt;= s(e) &amp;&amp; s(e) &lt;= extent[1];
					});
				} else{
					return [s.invert(extent[0]), s.invert(extent[1])].sort(function(a, b){return a-b;});
				}
			};
			
			return scale;
		}
		
		// Creating variables and scales 
		var x, y;
		var dimensions = [this.props.x, this.props.y];
		let svg = d3.select(this.view.element.querySelector("svg")).append("g") //Removed specific id
			.attr("class", "container");
		this.types = null;
		
		let margin = {
				left: 150,
				right: 20, 
				top: 10, 
				bottom: 40
			};
			let width = 500 - margin.left - margin.right;
			let height =  300 - margin.top - margin.bottom;
		
		let brush = d3.brush()
    	.extent([[0, 0], [width, height]])
    	.on("end", brushed);
		
		let xValue = (d) =&gt; {
			if (this.types[dimensions[0]] == "date") {
				return new Date(Date.parse(d[dimensions[0]]));
			} else if (this.types[dimensions[0]] == "time") {
				return new Date('2018-01-02T' + 
										(d[dimensions[0]].length &lt; 8? "0"+ d[dimensions[0]]: d[dimensions[0]])  + 'Z');
			} else {
				return d[dimensions[0]];
			}
		};
		
		let yValue = (d) =&gt; {
			if (this.types[dimensions[1]] == "date") {
				return new Date(Date.parse(d[dimensions[1]]));
			} else if (this.types[dimensions[1]] == "time") {
				return new Date('2018-01-02T' + 
										(d[dimensions[1]].length &lt; 8? "0"+ d[dimensions[1]]: d[dimensions[1]])  + 'Z');
			} else {
				return d[dimensions[1]];
			}
		};
		
		function brushed() {
			if (d3.event.sourceEvent &amp;&amp; d3.event.sourceEvent.type === "zoom") return; // ignore brush-by-zoom
			var s = d3.event.selection || [x.range(), y.range()];
			var interaction = [x.invertRange([s[0][0], s[1][0]]), y.invertRange([s[0][1], s[1][1]])];
			var t = {};
			t[dimensions[0]] = interaction[0];
			t[dimensions[1]] = interaction[1];
			that.data = t;
		}
		
		this.draw = (data) =&gt; {
			// Set scales
			dimensions = [this.props.x, this.props.y];
			var types = this.types;
			
			x = getScale(types[this.props.x], data, this.props.x).range([0, width]);
			y = getScale(types[this.props.y], data, this.props.y).range([height, 0]);
			
			let svg = d3.select(this.view.element.querySelector("svg")) // Removed specific id
				.attr("width", width + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom)
				.select(".container")
				.attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");	
			
			// Add the circles.
			let circles = svg.selectAll(".circle_mark")
				.data(data);
			
			//Enter
			let newCircles = circles.enter().append("g")
				.attr("class", "circle_mark");

			newCircles.append("circle")
				.attr("cx", function (d, i) {
					return x(xValue(d));
				})
				.attr("cy", function (d, i) {
					return y(yValue(d));
				})
				.attr("r", function (d, i) {
						return 5;
				});
			
			circles.select("circle")
				.attr("cx", function (d, i) {
					return x(xValue(d));
				})
				.attr("cy", function (d, i) {
					return y(yValue(d));
				})
				.attr("r", function (d, i) {
						return 5;
				});
			
			//Exit
			circles.exit().remove();
			
			// Add the X Axis
			let xAxis = svg.selectAll(".x.axis").data([data]);
			
			xAxis.enter().append("g").attr("class", "x axis")
				.attr("transform", "translate(0," + height + ")")
				.call(d3.axisBottom(x));
			
			xAxis.call(d3.axisBottom(x));
			
			// Add the Y Axis
			let yAxis = svg.selectAll(".y.axis").data([data]);
			
			yAxis.enter().append("g").attr("class", "y axis")
				.call(d3.axisLeft(y));
			
			yAxis.call(d3.axisLeft(y));
			
			// Attach a brush
			var brushElement = svg.data([data]);
			
			brushElement.enter().append("g")
				.attr("class", "brush")
				.call(brush);
			
			brushElement.call(brush);
			
			// Titles to the axes
      let yLabel = svg.selectAll(".y_label").data([data]);
			
			yLabel.enter().append("text")
				.attr("class", "y_label")
				.attr("text-anchor", "middle")  
				.attr("transform", "translate(" + (-margin.left) +","+(height/2)+")rotate(-90)") 
				.attr("alignment-baseline", "hanging")
				.text(this.props.y);
			
			yLabel.attr("transform", "translate(" + (-margin.left) +","+(height/2)+")rotate(-90)") 
				.attr("alignment-baseline", "hanging")
				.text(this.props.y);
			
      let xLabel = svg.selectAll(".x_label").data([data]);
			
			xLabel.enter().append("text")
				.attr("class", "x_label")
				.attr("text-anchor", "middle")
				.attr("transform", "translate("+ width/2 +","+ (height + margin.bottom - 2)+")")
				.attr("alignment-baseline", "baseline")
				.text(this.props.x);
			
			xLabel.attr("text-anchor", "middle")
				.attr("transform", "translate("+ width/2 +","+ (height + margin.bottom - 2)+")")
				.attr("alignment-baseline", "baseline")
				.text(this.props.x);
			
			// Piping the output for next steps
			this.filter(this.src.data.output, [this.data], this.types)
			.then((response) =&gt; {
				this.output = response.selected;
			});
		};
	},
	destroy: function() {

	},
	update: function() {
		if (!this.src.data) return;
		var data = this.src.data.output;
		if (this.props.x in data[0] &amp;&amp; this.props.y in data[0]) {
			if (!this.types) {
			this.extract_types = require("#stdlib-extract-types").extract_types;
			this.extract_types(data.slice(0, 5)).then((response) =&gt; {
				this.types = response;
				this.draw(data);
			});
			} else {
				this.draw(data);
			}
		}
	},
};</pre></div><div class="paragraph data-paragraph collapsed" name="Scatter Plot data" data-id="u5UX5VHE"><pre data-type="content" type="application/json" id="scatterPlot-data" class="visdata">{
  "config": {
    "src": {
      "data": ""
    },
    "view": "$view-id"
  },
  "data": {
  }
}</pre></div><div class="paragraph body-paragraph" name="Scatter Plot view" data-id="PgDfpaG5" last-execution-state="error"><div data-type="content" type="text/html" codemirror="true" contenteditable="true" id="scatterPlot-view" class="visview" spellcheck="true"></div><grammarly-btn><div class="_1BN1N Kzi1t MoE_1 _2DJZN Ho4t0" style="z-index: 2; transform: translate(810px, 303px);"><div class="_1HjH7"><div title="Protected by Grammarly" class="_3qe6h">&nbsp;</div></div></div></grammarly-btn><grammarly-btn><div class="_1BN1N Kzi1t MoE_1 _2DJZN Ho4t0" style="z-index: 2; transform: translate(810px, 303px);"><div class="_1HjH7"><div title="Protected by Grammarly" class="_3qe6h">&nbsp;</div></div></div></grammarly-btn><grammarly-btn><div class="_1BN1N Kzi1t MoE_1 _2DJZN Ho4t0" style="z-index: 2; transform: translate(810px, 303px);"><div class="_1HjH7"><div title="Protected by Grammarly" class="_3qe6h">&nbsp;</div></div></div></grammarly-btn><grammarly-btn><div class="_1BN1N Kzi1t MoE_1 _2DJZN Ho4t0" style="z-index: 2; transform: translate(810px, 303px);"><div class="_1HjH7"><div title="Protected by Grammarly" class="_3qe6h">&nbsp;</div></div></div></grammarly-btn></div><div class="paragraph style-paragraph collapsed" data-id="NVZQswr5" name="Scatter Plot style"><style data-type="content" type="text/css" codemirror="true">.scatterPlot {
	font-size: 12px;
	background-color: white;
}

.scatterPlot .tick text {
	fill: black;
}

.scatterPlot .tick line {
	stroke: black;
}

.scatterPlot .domain {
	stroke: black !important;
}

.scatterPlot .circle_mark circle {
	fill: steelblue;
	cursor: default;
	fill-opacity: 0.3;
}

.scatterPlot .circle_mark text {
	fill: white;
}

.scatterPlot .y_label, .x_label {
	fill: black;
}</style></div></div>