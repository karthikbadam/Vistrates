<div class="section section-visible" data-id="2DQH3q7U" name="Vistrate Standard Library" data-type="package" transient-focussed="true"><div class="paragraph body-paragraph collapsed" name="Documentation" data-id="iY89e6T8"><div data-type="content" type="text/html" codemirror="true" contenteditable="true" class="section-documentation"><h2>Vistrate Standard Library</h2><div>TODO</div></div></div><div class="paragraph data-paragraph locked collapsed" name="Properties" data-id="UXnky2xT"><pre data-type="content" type="application/json" class="section-properties" contenteditable="false">{
	"version": "0.1.6",
	"icon": "your_material_icon_string",
	"description": "Various helper methods usable in Vistrate.",
	"dependencies": [
		{
			"id": "kTKppb2i",
			"name": "Vistrate",
			"optional": false
		}
	],
	"changelog":
	{
    "0.1.6": "Added get query object function.",
		"0.1.5": "Added filtering module.",
		"0.1.4": "Added filtering module for user interaction.",
		"0.1.3": "Fixed bug in aggregation module.",
		"0.1.2": "Changed data type extractor.",
		"0.1.1": "Changed aggregation module and added data type extractor.",
		"0.1": "Initial version."
	},
  "github": {
		"url": "https://github.com/karthikbadam/Vistrates",
		"folder": "Packages/2DQH3q7U-Vistrates-Standard-Library"
	}
}</pre></div><div class="paragraph code-paragraph collapsed" data-id="FELBEjfd" name="Aggregation" last-execution-state=""><pre data-type="content" type="text/javascript" id="stdlib-aggregation" contenteditable="true">// "parser" is a d3 parser that is needed to turn dates to Date objects
// "reducer" is a d3 function to apply to the parsed dates during aggregation (e.g., to convert dates to months)
exports.aggregation = (data, attribute, parser, reducer, type) =&gt; {
	return new Promise(function(resolve, reject) {
		if (!data || data.length === 0) {
			reject("No data found");
		}
		let temp = {};
		data.forEach(function(datum) {
			var key = datum[attribute];
			if (parser) {
				key = parser(key);
			}
			if (reducer) {
				key = reducer(key);
			}
			if(temp[key]){
				temp[key].value += 1;
			}
			else{
				temp[key] = {"key": key, "value": 1};
			}
		});
		let result = [];
		Object.keys(temp).forEach(function(key){
			result.push(temp[key]);
		});
		
		// sort data
		if (parser || reducer || (type &amp;&amp; (type == "integer" || type == "float"))) {
			result = result.sort(function(a, b){
				if(a.key &lt; b.key) return -1;
				if(a.key &gt; b.key) return 1;
				return 0;
			});
		} else {
			result = result.sort(function(a, b){
				if(a.value &lt; b.value) return -1;
				if(a.value &gt; b.value) return 1;
				return 0;
			});
		}
		resolve(result);
	});
};</pre></div><div class="paragraph code-paragraph collapsed" data-id="ACbTQbLb" name="Apply Filters"><pre data-type="content" type="text/javascript" id="stdlib-filter">exports.filter = (data, filters, types) =&gt; {
// Argument: data is the raw data, filters is array of {"attribute": "value"}, and types is an object describing of each dataset attribute.
// Return: Filtered data
// Six basic types: String, datetime, date, time, integer, float
	return new Promise(function(resolve, reject) {
		if (!data || data.length === 0) {
			reject("No data found");
		}
		var filtered = [];
		var rest = [];
		data.forEach(function (d, i) {
			var isPresent = true;
			for (var j = 0; j &lt; filters.length; j++) {
				var keys = Object.keys(filters[j]);
				for (var k = 0; k &lt; keys.length; k++) {
					var key = keys[k];
					if (types) {
						if (!(key in types)) {
							continue;
						}
						var type = 	types[key];
						if (type == "string") {
							let values = filters[j][key];
							if (values.length &gt; 0 &amp;&amp; values.indexOf(d[key]) &lt; 0) {
								isPresent = false;
							}
						} else if (type == "integer" || type == "float") {
							let values = filters[j][key];
							var c = parseFloat(d[key]);
							if (c &lt; values[0] || c &gt; values[1]) {
								isPresent = false;
							} 
						} else if (type == "date" || type == "datetime") {
							let values = filters[j][key];
							if (Date.parse(d[key])&lt;Date.parse(values[0]) || Date.parse(d[key])&gt;Date.parse(values[1])) {
								isPresent = false;
							}
						} else {
							// type == "time"
							let values = filters[j][key];
							if (d[key] &lt; values[0] || d[key] &gt; values[1]) {
								isPresent = false;
							}
						}
					} else {
						let values = filters[j][key];
						if (values.length &gt; 0 &amp;&amp; values.indexOf(d[key]) &lt; 0) {
							isPresent = false;
						}
					}
					
				}
			}
			if (isPresent) {
				filtered.push(d);
			} else {
				rest.push(d);
			}
		});
		
		resolve({
			"selected": filtered,
			"unselected": rest
		});
	});
};</pre></div><div class="paragraph code-paragraph collapsed" data-id="TAdkL8Y4" name="Get Query"><pre data-type="content" type="text/javascript" id="stdlib-query">// JavaScript code here

exports.getQueryObject = (filter) =&gt; {
  let result = {};
  Object.keys(filter).forEach((k) =&gt; {
    
    if(Array.isArray(filter[k])){
      result.k = {gte:filter[k][0], lte:filter[k][1]};
    }
    else{
     	result[k] = filter[k];
    }
  });
  return result;
};</pre></div><div class="paragraph code-paragraph locked collapsed" data-id="M8PYJGGZ" name="Extract Data Types" last-execution-state=""><pre data-type="content" type="text/javascript" id="stdlib-extract-types" contenteditable="false">exports.extract_types = (data) =&gt; {
// Arg: Pass parameter data which is an array of at least three data items
// Return: an object of data types for each attribute in data
// Six basic types: String, datetime, date, time, integer, float
	return new Promise(function(resolve, reject) {
		this.mode = (array) =&gt; {
			if(array.length === 0)
				return null;
			var modeMap = {};
			var maxEl = array[0], maxCount = 1;
			for(var i = 0; i &lt; array.length; i++)
			{
				var el = array[i];
				if(!modeMap[el])
					modeMap[el] = 1;
				else
					modeMap[el]++;  
				if(modeMap[el] &gt; maxCount)
				{
					maxEl = el;
					maxCount = modeMap[el];
				}
			}
			return maxEl;
		};
		
		let keys = Object.keys(data[0]);
		if (keys.length === 0 || data.length &lt; 2) {
			reject("No attributes found or two little data");
		}
		var data_types = {};
		keys.forEach(function (key) {
			var types = [];
			data.forEach(function (d) {
				var value = "" + d[key];
				var type = "string";
				if (isNaN (value)) {
					// Not a number
					if (value.split("/").length == 3) {
						type = "date";
					} else if (value.split(":").length == 3) {
						type = "time";
					} else if (!isNaN(Date.parse(value))) {
						type = "datetime";
					} else {
						type = "string";
					}
				} else {
					// Yay, its a number
					if (value.indexOf(".") &gt;= 0) {
						type = "float";
					} else {
						type = "integer";
					}
				}
				types.push(type);
			});
			
			data_types[key] = this.mode(types);
		});
		resolve(data_types);
	});
};</pre></div></div>