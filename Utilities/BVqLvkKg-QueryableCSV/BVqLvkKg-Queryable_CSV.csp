<div class="section section-visible" data-type="package" name="Queryable CSV" data-id="BVqLvkKg" transient-focussed="true"><div class="paragraph body-paragraph locked collapsed" name="Documentation" data-id="yiAvZZ5n"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" class="section-documentation"><h2>Queryable CSV component</h2><div>A component for uploading a CSV file that can be queried through the Webstrates searchable CSV asset feature.</div></div></div><div class="paragraph data-paragraph collapsed locked" name="Properties" data-id="YcUKYJBU"><pre data-type="content" type="application/json" class="section-properties" contenteditable="false">{
	"version": "0.1",
	"icon": "your_material_icon_string",
	"description": "A component for uploading a CSV file that can be queried through the Webstrates searchable CSV asset feature.",
	"tags": [
		"vistrate"
	],
	"dependencies": [
		{
			"id": "kTKppb2i",
			"name": "Vistrate",
			"optional": false
		}
	],
	"changelog":
	{
		"0.1": "Initial version."
	},
  "github": {
    "url": "https://github.com/karthikbadam/Vistrates",
    "folder": "Utilities/BVqLvkKg-QueryableCSV"
  }
}</pre></div><div class="paragraph code-paragraph collapsed" name="Queryable CSV" data-id="BhUydTCk" last-execution-state="success"><pre data-type="content" type="text/javascript-viscontroller" class="viscontroller" id="queryableCSV">vc = {
	data: '$data-id',
	src: [],
	init: function() {
		this.showUploadButton = () =&gt; {
			const uploadButton = document.createElement("button");
			uploadButton.innerText = "Upload CSV asset";
			this.view.content = uploadButton;
			uploadButton.addEventListener("click", (e) =&gt; {
				webstrate.uploadAsset((err, res) =&gt; {
					this.data = {asset: res, query: {
												"q": {},
												"sort": {},
												"limit": 50,
												"skip": 0
					}};
				}, {searchable: true});
			});			
		};
		
		this.performQuery = (query, cb) =&gt; {
			const QueryHelper = require("#query-helper");
			QueryHelper.query(this.data.asset.fileName, query.q, query.sort, query.skip, query.limit).then((res) =&gt; {
				this.output = res;
				cb(res);
			});
		};
		
		this.showTable = (data) =&gt; {
			const buildTableRow = (entry, elType = "td") =&gt; {
			 return `&lt;tr&gt;${Object.keys(entry).map((k) =&gt; `&lt;${elType}&gt;${String(entry[k]).slice(0, 20)}&lt;/${elType}&gt;`).join("")}&lt;tr&gt;`;
			};
			const buildTableBody = (data) =&gt; {
				return data.map((entry) =&gt; buildTableRow(entry)).join("");
			};
			let tableHead = `&lt;tr&gt;${Object.keys(data[0]).map((k) =&gt; `&lt;th&gt;${k}&lt;/th&gt;`).join("")}&lt;tr&gt;`;
			let tableBody = buildTableBody(data);

			let table = `&lt;table&gt;&lt;thead&gt;${tableHead}&lt;/thead&gt;&lt;body&gt;${tableBody}&lt;/body&gt;&lt;/table&gt;`;
			let container = document.createElement("div");
			container.classList.add("csv-table");
			container.innerHTML = table;
			this.view.element.appendChild(container);
		};
		
		this.showQueryUI = () =&gt; {
			let inputs = `&lt;label&gt;Query&lt;/label&gt;
								&lt;input type="text" class="query-ui-query" placeholder="{}"&gt;&lt;/div&gt;
								&lt;label&gt;Sort&lt;/label&gt;
								&lt;input type="text" class="query-ui-sort" placeholder="{}"&gt;&lt;/div&gt;
								&lt;label&gt;Limit&lt;/label&gt;
								&lt;input type="number" class="query-ui-limit short" placeholder="50"&gt;&lt;/div&gt;
								&lt;label&gt;Skip&lt;/label&gt;
								&lt;input type="number" class="query-ui-skip short" placeholder="0"&gt;
`;
			let ui = document.createElement("div");
			ui.classList.add("query-ui");
			ui.innerHTML = inputs;
			this.view.element.prepend(ui);
			
			if (this.data.query) {
				ui.querySelector(".query-ui-query").value = JSON.stringify(this.data.query.q);
				ui.querySelector(".query-ui-sort").value = JSON.stringify(this.data.query.sort);
				ui.querySelector(".query-ui-limit").value = this.data.query.limit;
				ui.querySelector(".query-ui-skip").value = this.data.query.skip;
			}
			
			ui.addEventListener("change", (e) =&gt; {
				let query, sort, limit, skip;
				try {
					query = this.view.element.querySelector(".query-ui .query-ui-query").value;
					query = query.length &gt; 0 ? JSON.parse(query) : {};
					sort = this.view.element.querySelector(".query-ui .query-ui-sort").value;
					sort = sort.length &gt; 0 ? JSON.parse(sort) : {};
					limit = Number(this.view.element.querySelector(".query-ui .query-ui-limit").value);
					skip = Number(this.view.element.querySelector(".query-ui .query-ui-skip").value);	
				} catch (err) {
					return;
				}
				this.data = {asset: this.data.asset, query: {q: query, sort: sort, limit: limit, skip: skip}};
			});
		};
	},
	destroy: function() {
		if (this.view) this.view.content = "";
	},
	update: function() {

		if (this.view) this.view.content = "";
		if (!this.data.asset) {
			this.showUploadButton();
		}	else if (this.data.query) {
			this.performQuery(this.data.query, data =&gt; this.showTable(data));
		}
		if (this.data.asset) {
			this.showQueryUI();
		}
	},
};</pre></div><div class="paragraph code-paragraph collapsed" data-id="U8Xff2k3" name="Query helper"><pre data-type="content" type="text/javascript" id="query-helper">exports.query = (asset, query, sort, skip, limit) =&gt; {
	return new Promise(function(resolve, reject) {
		webstrate.searchAsset(asset, {
			query: query,
			sort: sort,
			skip: skip,
			limit: limit &gt; 0 ? limit : undefined,
		}, (err, res) =&gt; {
			if (err) {
				reject(err);
			} else {
				resolve(res);
			}
		});
	});
};</pre></div><div class="paragraph data-paragraph collapsed" name="Queryable CSV data" data-id="R8zgVc9f"><pre data-type="content" type="application/json" id="queryableCSV-data" class="visdata">{
  "config": {
    "src": {},
    "view": "$view-id"
  },
  "data": {
  }
}</pre></div><div class="paragraph style-paragraph collapsed" data-id="zSyArZWp" name="Queryable CSV view style"><style data-type="content" type="text/css" codemirror="true">.csv-table {
	padding: 0px;
	color: var(--color-primary-shade-1);
	width: 100% !important;
	color: var(--color-primary-text);
	overflow: auto;
}

.csv-table table {
	width: 100% !important;
	font-size: .6em;
	border-collapse: collapse;
}

.csv-table table td {
	table-layout: fixed;
}

.csv-table table thead tr {
	background-color: var(--color-primary-shade-1);
	color: var(--color-primary-text);
	text-align: left;
}

.csv-table table tr:hover {
	background-color: var(--color-accent) !important;
}

.query-ui {
	font-size: .6em;	
}

.query-ui input {
	margin-left: 4px;
	margin-right: 4px;
	width: 20em;;
	padding: 4px;
	padding-left: 0px;
	outline: 0;
	color: var(--color-primary-text);
	background-color: transparent;
	border: 0;
	border-bottom: 1px solid var(--color-tertiary-text);
	margin-top: 8px;
	margin-bottom: 16px;
}

.query-ui input.short {
	width: 3em;
	text-align: center;
}
</style></div><div class="paragraph body-paragraph locked" name="Queryable CSV view" data-id="9DshMjWd"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" id="queryableCSV-view" class="visview"></div></div></div>